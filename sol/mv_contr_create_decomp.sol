// 0xA1BEe1daE9Af77dAC73aA0459eD63b4D93fC6d29 # ᨓᨆ (ᨓᨆ)
// Decompiled by library.dedaub.com
// 2023.09.04 02:05 UTC
// Compiled using the solidity compiler version 0.8.21


// Data structures and variables inferred from the use of storage instructions
mapping (uint256 => uint256) owner; // STORAGE[0x0]
uint256 stor_2; // STORAGE[0x2]
uint256[] array_3; // STORAGE[0x3]
uint256[] array_4; // STORAGE[0x4]
uint256 ___function_selector__; // STORAGE[0x5] bytes 0 to 19


// Events
OwnershipTransferred(address, address);
Transfer(address, address, uint256);

function _SafeExp(uint256 varg0, uint256 varg1, uint256 varg2) private {
    if (varg1) {
        if (varg0) {
            if (varg0 == 1) {
                return 1;
            } else if (varg0 == 2) {
                require(varg1 <= uint8.max, Panic(17)); // arithmetic overflow or underflow
                require(2 ** varg1 <= varg2, Panic(17)); // arithmetic overflow or underflow
                return 2 ** varg1;
            } else if (!((varg0 < 11) & (varg1 < 78) | (varg0 < 307) & (varg1 < 32))) {
                v0 = v1 = 1;
                while (varg1 > 1) {
                    require(varg0 <= varg2 / varg0, Panic(17)); // arithmetic overflow or underflow
                    if (varg1 & 0x1) {
                        v0 = v0 * varg0;
                    }
                    varg0 *= varg0;
                    varg1 = varg1 >> 1;
                }
                require(v0 <= varg2 / varg0, Panic(17)); // arithmetic overflow or underflow
                return v0 * varg0;
            } else {
                require(varg0 ** varg1 <= varg2, Panic(17)); // arithmetic overflow or underflow
                return varg0 ** varg1;
            }
        } else {
            return 0;
        }
    } else {
        return 1;
    }
}

function _SafeAdd(uint256 varg0, uint256 varg1) private {
    require(varg0 <= varg0 + varg1, Panic(17)); // arithmetic overflow or underflow
    return varg0 + varg1;
}

// Note: The function selector is not present in the original solidity code.
// However, we display it for the sake of completeness.

function __function_selector__() public nonPayable {
    require(v0.length <= uint64.max, Panic(65)); // failed memory allocation (too much memory)
    v1 = array_3.length >> 1;
    if (!(array_3.length & 0x1)) {
        v1 = v2 = v1 & 0x7f;
    }
    require((array_3.length & 0x1) - (v1 < 32), Panic(34)); // access to incorrectly encoded storage byte array
    if (v1 > 31) {
        v3 = v4 = array_3.data;
        v3 = v5 = v4 + (v0.length + 31 >> 5);
        while (v3 < v4 + (v1 + 31 >> 5)) {
            STORAGE[v3] = STORAGE[v3] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff | uint256(0);
            v3 = v3 + 1;
        }
    }
    v6 = v7 = 32;
    if (v0.length > 31 == 1) {
        v8 = array_3.data;
        v9 = v10 = 0;
        while (v9 < v0.length & ~0x1f) {
            STORAGE[v8] = MEM[0xe1a893e1a88600000000000000000000000000000000000000000000000000006e1a893e1a8860000000000000000000000000000000000000000000000000000 + v6];
            v8 = v8 + 1;
            v6 = v6 + 32;
            v9 = v9 + 32;
        }
        if (v0.length & ~0x1f < v0.length) {
            STORAGE[v8] = MEM[0xe1a893e1a88600000000000000000000000000000000000000000000000000006e1a893e1a8860000000000000000000000000000000000000000000000000000 + v6] & ~(~0 >> ((v0.length & 0x1f) << 3));
        }
        array_3 = (v0.length << 1) + 1;
    } else {
        v11 = v12 = 0;
        if (v0.length) {
            v13 = v0.data;
        }
        array_3 = v11 & ~(~0 >> (v0.length << 3)) | v0.length << 1;
        // Unknown jump to Block 0x691B0x10. Refer to 3-address code (TAC);
    }
    require(v14.length <= uint64.max, Panic(65)); // failed memory allocation (too much memory)
    v15 = array_4.length >> 1;
    if (!(array_4.length & 0x1)) {
        v15 = v16 = v15 & 0x7f;
    }
    require((array_4.length & 0x1) - (v15 < 32), Panic(34)); // access to incorrectly encoded storage byte array
    if (v15 > 31) {
        v17 = v18 = array_4.data;
        v17 = v19 = v18 + (v14.length + 31 >> 5);
        while (v17 < v18 + (v15 + 31 >> 5)) {
            STORAGE[v17] = STORAGE[v17] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff | uint256(0);
            v17 = v17 + 1;
        }
    }
    v20 = v21 = 32;
    if (v14.length > 31 == 1) {
        v22 = array_4.data;
        v23 = v24 = 0;
        while (v23 < v14.length & ~0x1f) {
            STORAGE[v22] = MEM[0xe1a893e1a88600000000000000000000000000000000000000000000000000008c379a000000000000000000000000000000000000000000000000000000000 + v20];
            v22 = v22 + 1;
            v20 = v20 + 32;
            v23 = v23 + 32;
        }
        if (v14.length & ~0x1f < v14.length) {
            STORAGE[v22] = MEM[0xe1a893e1a88600000000000000000000000000000000000000000000000000008c379a000000000000000000000000000000000000000000000000000000000 + v20] & ~(~0 >> ((v14.length & 0x1f) << 3));
        }
        array_4 = (v14.length << 1) + 1;
    } else {
        v25 = v26 = 0;
        if (v14.length) {
            v27 = v14.data;
        }
        array_4 = v25 & ~(~0 >> (v14.length << 3)) | v14.length << 1;
        // Unknown jump to Block 0x691B0x8e. Refer to 3-address code (TAC);
    }
    ___function_selector__ = msg.sender;
    emit OwnershipTransferred(___function_selector__, msg.sender);
    v28 = _SafeExp(10, uint8(18), uint256.max);
    require(!0x0 | (v28 == 0 * v28 / 0), Panic(17)); // arithmetic overflow or underflow
    if (msg.sender - address(0x0)) {
        v29 = _SafeAdd(stor_2, 0 * v28);
        stor_2 = v29;
        v30 = _SafeAdd(owner[msg.sender], 0 * v28);
        owner[msg.sender] = v30;
        MEM[MEM[64] + 0] = 0 * v28;
        emit Transfer(address(0x0), msg.sender, 0 * v28);
        MEM[0 len 8021] = 0x608060405234801561000f575f80fd5b5060043610610109575f3560e01c8063715018a6116100a0578063a45669501161006f578063a4566950146102a5578063a457c2d7146102af578063a9059cbb146102df578063dd62ed3e1461030f578063f2fde38b1461033f57610109565b8063715018a61461024357806379cc67901461024d5780638da5cb5b1461026957806395d89b411461028757610109565b8063313ce567116100dc578063313ce567146101a957806339509351146101c757806342966c68146101f757806370a082311461021357610109565b806306fdde031461010d578063095ea7b31461012b57806318160ddd1461015b57806323b872dd14610179575b5f80fd5b61011561035b565b60405161012291906113b5565b60405180910390f35b61014560048036038101906101409190611466565b6103eb565b60405161015291906114be565b60405180910390f35b61016361040d565b60405161017091906114e6565b60405180910390f35b610193600480360381019061018e91906114ff565b610416565b6040516101a091906114be565b60405180910390f35b6101b1610444565b6040516101be919061156a565b60405180910390f35b6101e160048036038101906101dc9190611466565b61044c565b6040516101ee91906114be565b60405180910390f35b610211600480360381019061020c9190611583565b6104f1565b005b61022d600480360381019061022891906115ae565b610505565b60405161023a91906114e6565b60405180910390f35b61024b61054a565b005b61026760048036038101906102629190611466565b6105d1565b005b6102716105f1565b60405161027e91906115e8565b60405180910390f35b61028f610619565b60405161029c91906113b5565b60405180910390f35b6102ad6106a9565b005b6102c960048036038101906102c49190611466565b6107f3565b6040516102d691906114be565b60405180910390f35b6102f960048036038101906102f49190611466565b6108d7565b60405161030691906114be565b60405180910390f35b61032960048036038101906103249190611601565b6108f9565b60405161033691906114e6565b60405180910390f35b610359600480360381019061035491906115ae565b61097b565b005b60606003805461036a9061166c565b80601f01602080910402602001604051908101604052809291908181526020018280546103969061166c565b80156103e15780601f106103b8576101008083540402835291602001916103e1565b820191905f5260205f20905b8154815290600101906020018083116103c457829003601f168201915b5050505050905090565b5f806103f5610a71565b9050610402818585610a78565b600191505092915050565b5f600254905090565b5f80610420610a71565b905061042d858285610c3b565b610438858585610cc6565b60019150509392505050565b5f6012905090565b5f80610456610a71565b90506104e681858560015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546104e191906116c9565b610a78565b600191505092915050565b6105026104fc610a71565b82610f3b565b50565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610552610a71565b73ffffffffffffffffffffffffffffffffffffffff166105706105f1565b73ffffffffffffffffffffffffffffffffffffffff16146105c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bd90611746565b60405180910390fd5b6105cf5f611107565b565b6105e3826105dd610a71565b83610c3b565b6105ed8282610f3b565b5050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546106289061166c565b80601f01602080910402602001604051908101604052809291908181526020018280546106549061166c565b801561069f5780601f106106765761010080835404028352916020019161069f565b820191905f5260205f20905b81548152906001019060200180831161068257829003601f168201915b5050505050905090565b6106d461dead6106b7610444565b600a6106c39190611893565b60046106cf91906118dd565b6111ca565b610711737a20189b297343cf26d8548764b04891f37f34146106f4610444565b600a6107009190611893565b600161070c91906118dd565b6111ca565b61074e73046eb71eb92e3ed2534d005ab4436b4b8db24dfa610731610444565b600861073d9190611893565b600161074991906118dd565b6111ca565b61078b739abf7504162e5ca517d504a16e8addcb10115aab61076e610444565b600761077a9190611893565b600161078691906118dd565b6111ca565b6107c8737ae04ed7f1082d8aa1c19893e9ec4039a666c02c6107ab610444565b60056107b79190611893565b60016107c391906118dd565b6111ca565b6107f1336107d4610444565b600a6107e09190611893565b60016107ec91906118dd565b6111ca565b565b5f806107fd610a71565b90505f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050838110156108be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b59061198e565b60405180910390fd5b6108cb8286868403610a78565b60019250505092915050565b5f806108e1610a71565b90506108ee818585610cc6565b600191505092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b610983610a71565b73ffffffffffffffffffffffffffffffffffffffff166109a16105f1565b73ffffffffffffffffffffffffffffffffffffffff16146109f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ee90611746565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5c90611a1c565b60405180910390fd5b610a6e81611107565b50565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610add90611aaa565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4b90611b38565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610c2e91906114e6565b60405180910390a3505050565b5f610c4684846108f9565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610cc05781811015610cb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca990611ba0565b60405180910390fd5b610cbf8484848403610a78565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2b90611c2e565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610da2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9990611cbc565b60405180910390fd5b610dad838383611321565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610e30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2790611d4a565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610ebe91906116c9565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f2291906114e6565b60405180910390a3610f35848484611326565b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610fa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa090611dd8565b60405180910390fd5b610fb4825f83611321565b5f805f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015611037576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102e90611e66565b60405180910390fd5b8181035f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508160025f82825461108b9190611e84565b925050819055505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516110ef91906114e6565b60405180910390a3611102835f84611326565b505050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122f90611f01565b60405180910390fd5b6112435f8383611321565b8060025f82825461125491906116c9565b92505081905550805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546112a691906116c9565b925050819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161130a91906114e6565b60405180910390a361131d5f8383611326565b5050565b505050565b505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015611362578082015181840152602081019050611347565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6113878261132b565b6113918185611335565b93506113a1818560208601611345565b6113aa8161136d565b840191505092915050565b5f6020820190508181035f8301526113cd818461137d565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611402826113d9565b9050919050565b611412816113f8565b811461141c575f80fd5b50565b5f8135905061142d81611409565b92915050565b5f819050919050565b61144581611433565b811461144f575f80fd5b50565b5f813590506114608161143c565b92915050565b5f806040838503121561147c5761147b6113d5565b5b5f6114898582860161141f565b925050602061149a85828601611452565b9150509250929050565b5f8115159050919050565b6114b8816114a4565b82525050565b5f6020820190506114d15f8301846114af565b92915050565b6114e081611433565b82525050565b5f6020820190506114f95f8301846114d7565b92915050565b5f805f60608486031215611516576115156113d5565b5b5f6115238682870161141f565b93505060206115348682870161141f565b925050604061154586828701611452565b9150509250925092565b5f60ff82169050919050565b6115648161154f565b82525050565b5f60208201905061157d5f83018461155b565b92915050565b5f60208284031215611598576115976113d5565b5b5f6115a584828501611452565b91505092915050565b5f602082840312156115c3576115c26113d5565b5b5f6115d08482850161141f565b91505092915050565b6115e2816113f8565b82525050565b5f6020820190506115fb5f8301846115d9565b92915050565b5f8060408385031215611617576116166113d5565b5b5f6116248582860161141f565b92505060206116358582860161141f565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061168357607f821691505b6020821081036116965761169561163f565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6116d382611433565b91506116de83611433565b92508282019050808211156116f6576116f561169c565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f611730602083611335565b915061173b826116fc565b602082019050919050565b5f6020820190508181035f83015261175d81611724565b9050919050565b5f8160011c9050919050565b5f808291508390505b60018511156117b9578086048111156117955761179461169c565b5b60018516156117a45780820291505b80810290506117b285611764565b9450611779565b94509492505050565b5f826117d1576001905061188c565b816117de575f905061188c565b81600181146117f457600281146117fe5761182d565b600191505061188c565b60ff8411156118105761180f61169c565b5b8360020a9150848211156118275761182661169c565b5b5061188c565b5060208310610133831016604e8410600b84101617156118625782820a90508381111561185d5761185c61169c565b5b61188c565b61186f8484846001611770565b925090508184048111156118865761188561169c565b5b81810290505b9392505050565b5f61189d82611433565b91506118a88361154f565b92506118d57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846117c2565b905092915050565b5f6118e782611433565b91506118f283611433565b925082820261190081611433565b915082820484148315176119175761191661169c565b5b5092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f611978602583611335565b91506119838261191e565b604082019050919050565b5f6020820190508181035f8301526119a58161196c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f611a06602683611335565b9150611a11826119ac565b604082019050919050565b5f6020820190508181035f830152611a33816119fa565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f611a94602483611335565b9150611a9f82611a3a565b604082019050919050565b5f6020820190508181035f830152611ac181611a88565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f611b22602283611335565b9150611b2d82611ac8565b604082019050919050565b5f6020820190508181035f830152611b4f81611b16565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000005f82015250565b5f611b8a601d83611335565b9150611b9582611b56565b602082019050919050565b5f6020820190508181035f830152611bb781611b7e565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f611c18602583611335565b9150611c2382611bbe565b604082019050919050565b5f6020820190508181035f830152611c4581611c0c565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f611ca6602383611335565b9150611cb182611c4c565b604082019050919050565b5f6020820190508181035f830152611cd381611c9a565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f611d34602683611335565b9150611d3f82611cda565b604082019050919050565b5f6020820190508181035f830152611d6181611d28565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f206164647265735f8201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b5f611dc2602183611335565b9150611dcd82611d68565b604082019050919050565b5f6020820190508181035f830152611def81611db6565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e5f8201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b5f611e50602283611335565b9150611e5b82611df6565b604082019050919050565b5f6020820190508181035f830152611e7d81611e44565b9050919050565b5f611e8e82611433565b9150611e9983611433565b9250828203905081811115611eb157611eb061169c565b5b92915050565b7f45524332303a206d696e7420746f20746865207a65726f2061646472657373005f82015250565b5f611eeb601f83611335565b9150611ef682611eb7565b602082019050919050565b5f6020820190508181035f830152611f1881611edf565b905091905056fea2646970667358221220db9c5b9c9fc711772e899506b991fb1436a954141660d2d84c2d72b7832c896164736f6c63430008150033;
        return MEM[0 len 8021];
    } else {
        MEM[4 + MEM[64] + 0] = 32;
        revert(Error('ERC20: mint to the zero address'));
    }
}

