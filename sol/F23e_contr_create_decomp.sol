// Decompiled by library.dedaub.com
// 2023.09.10 16:26 UTC
// Compiled using the solidity compiler version 0.8.21


// Data structures and variables inferred from the use of storage instructions
mapping (uint256 => uint256) owner; // STORAGE[0x0]
uint256 stor_2; // STORAGE[0x2]
uint256[] array_3; // STORAGE[0x3]
uint256[] array_4; // STORAGE[0x4]
uint256 ___function_selector__; // STORAGE[0x5] bytes 0 to 19


// Events
OwnershipTransferred(address, address);
Transfer(address, address, uint256);

function _SafeExp(uint256 varg0, uint256 varg1, uint256 varg2) private {
    if (varg1) {
        if (varg0) {
            if (varg0 == 1) {
                return 1;
            } else if (varg0 == 2) {
                require(varg1 <= uint8.max, Panic(17)); // arithmetic overflow or underflow
                require(2 ** varg1 <= varg2, Panic(17)); // arithmetic overflow or underflow
                return 2 ** varg1;
            } else if (!((varg0 < 11) & (varg1 < 78) | (varg0 < 307) & (varg1 < 32))) {
                v0 = v1 = 1;
                while (varg1 > 1) {
                    require(varg0 <= varg2 / varg0, Panic(17)); // arithmetic overflow or underflow
                    if (varg1 & 0x1) {
                        v0 = v0 * varg0;
                    }
                    varg0 *= varg0;
                    varg1 = varg1 >> 1;
                }
                require(v0 <= varg2 / varg0, Panic(17)); // arithmetic overflow or underflow
                return v0 * varg0;
            } else {
                require(varg0 ** varg1 <= varg2, Panic(17)); // arithmetic overflow or underflow
                return varg0 ** varg1;
            }
        } else {
            return 0;
        }
    } else {
        return 1;
    }
}

function _SafeAdd(uint256 varg0, uint256 varg1) private {
    require(varg0 <= varg0 + varg1, Panic(17)); // arithmetic overflow or underflow
    return varg0 + varg1;
}

// Note: The function selector is not present in the original solidity code.
// However, we display it for the sake of completeness.

function __function_selector__() public nonPayable {
    require(v0.length <= uint64.max, Panic(65)); // failed memory allocation (too much memory)
    v1 = array_3.length >> 1;
    if (!(array_3.length & 0x1)) {
        v1 = v2 = v1 & 0x7f;
    }
    require((array_3.length & 0x1) - (v1 < 32), Panic(34)); // access to incorrectly encoded storage byte array
    if (v1 > 31) {
        v3 = v4 = array_3.data;
        v3 = v5 = v4 + (v0.length + 31 >> 5);
        while (v3 < v4 + (v1 + 31 >> 5)) {
            STORAGE[v3] = STORAGE[v3] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff | uint256(0);
            v3 = v3 + 1;
        }
    }
    v6 = v7 = 32;
    if (v0.length > 31 == 1) {
        v8 = array_3.data;
        v9 = v10 = 0;
        while (v9 < v0.length & ~0x1f) {
            STORAGE[v8] = MEM[0xd8a7d984d984d8a700000000000000000000000000000000000000000000000010d8a7d984d8a7d985d8a7d8b1d8a7d8aa00000000000000000000000000000000 + v6];
            v8 = v8 + 1;
            v6 = v6 + 32;
            v9 = v9 + 32;
        }
        if (v0.length & ~0x1f < v0.length) {
            STORAGE[v8] = MEM[0xd8a7d984d984d8a700000000000000000000000000000000000000000000000010d8a7d984d8a7d985d8a7d8b1d8a7d8aa00000000000000000000000000000000 + v6] & ~(~0 >> ((v0.length & 0x1f) << 3));
        }
        array_3 = (v0.length << 1) + 1;
    } else {
        v11 = v12 = 0;
        if (v0.length) {
            v13 = v0.data;
        }
        array_3 = v11 & ~(~0 >> (v0.length << 3)) | v0.length << 1;
        // Unknown jump to Block 0x695B0x10. Refer to 3-address code (TAC);
    }
    require(v14.length <= uint64.max, Panic(65)); // failed memory allocation (too much memory)
    v15 = array_4.length >> 1;
    if (!(array_4.length & 0x1)) {
        v15 = v16 = v15 & 0x7f;
    }
    require((array_4.length & 0x1) - (v15 < 32), Panic(34)); // access to incorrectly encoded storage byte array
    if (v15 > 31) {
        v17 = v18 = array_4.data;
        v17 = v19 = v18 + (v14.length + 31 >> 5);
        while (v17 < v18 + (v15 + 31 >> 5)) {
            STORAGE[v17] = STORAGE[v17] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff | uint256(0);
            v17 = v17 + 1;
        }
    }
    v20 = v21 = 32;
    if (v14.length > 31 == 1) {
        v22 = array_4.data;
        v23 = v24 = 0;
        while (v23 < v14.length & ~0x1f) {
            STORAGE[v22] = MEM[0xd8a7d984d8a7d985d8a7d8b1d8a7d8aa000000000000000000000000000000008c379a000000000000000000000000000000000000000000000000000000000 + v20];
            v22 = v22 + 1;
            v20 = v20 + 32;
            v23 = v23 + 32;
        }
        if (v14.length & ~0x1f < v14.length) {
            STORAGE[v22] = MEM[0xd8a7d984d8a7d985d8a7d8b1d8a7d8aa000000000000000000000000000000008c379a000000000000000000000000000000000000000000000000000000000 + v20] & ~(~0 >> ((v14.length & 0x1f) << 3));
        }
        array_4 = (v14.length << 1) + 1;
    } else {
        v25 = v26 = 0;
        if (v14.length) {
            v27 = v14.data;
        }
        array_4 = v25 & ~(~0 >> (v14.length << 3)) | v14.length << 1;
        // Unknown jump to Block 0x695B0x8e. Refer to 3-address code (TAC);
    }
    ___function_selector__ = msg.sender;
    emit OwnershipTransferred(___function_selector__, msg.sender);
    v28 = _SafeExp(10, uint8(18), uint256.max);
    require(!0x423a35c7 | (v28 == 0x423a35c7 * v28 / 0x423a35c7), Panic(17)); // arithmetic overflow or underflow
    if (msg.sender - address(0x0)) {
        v29 = _SafeAdd(stor_2, 0x423a35c7 * v28);
        stor_2 = v29;
        v30 = _SafeAdd(owner[msg.sender], 0x423a35c7 * v28);
        owner[msg.sender] = v30;
        MEM[MEM[64] + 0] = 0x423a35c7 * v28;
        emit Transfer(address(0x0), msg.sender, 0x423a35c7 * v28);
        MEM[0 len 6781] = 0x608060405234801561000f575f80fd5b50600436106100fe575f3560e01c8063715018a611610095578063a457c2d711610064578063a457c2d71461029a578063a9059cbb146102ca578063dd62ed3e146102fa578063f2fde38b1461032a576100fe565b8063715018a61461023857806379cc6790146102425780638da5cb5b1461025e57806395d89b411461027c576100fe565b8063313ce567116100d1578063313ce5671461019e57806339509351146101bc57806342966c68146101ec57806370a0823114610208576100fe565b806306fdde0314610102578063095ea7b31461012057806318160ddd1461015057806323b872dd1461016e575b5f80fd5b61010a610346565b60405161011791906110ff565b60405180910390f35b61013a600480360381019061013591906111b0565b6103d6565b6040516101479190611208565b60405180910390f35b6101586103f8565b6040516101659190611230565b60405180910390f35b61018860048036038101906101839190611249565b610401565b6040516101959190611208565b60405180910390f35b6101a661042f565b6040516101b391906112b4565b60405180910390f35b6101d660048036038101906101d191906111b0565b610437565b6040516101e39190611208565b60405180910390f35b610206600480360381019061020191906112cd565b6104dc565b005b610222600480360381019061021d91906112f8565b6104f0565b60405161022f9190611230565b60405180910390f35b610240610535565b005b61025c600480360381019061025791906111b0565b6105bc565b005b6102666105dc565b6040516102739190611332565b60405180910390f35b610284610604565b60405161029191906110ff565b60405180910390f35b6102b460048036038101906102af91906111b0565b610694565b6040516102c19190611208565b60405180910390f35b6102e460048036038101906102df91906111b0565b610778565b6040516102f19190611208565b60405180910390f35b610314600480360381019061030f919061134b565b61079a565b6040516103219190611230565b60405180910390f35b610344600480360381019061033f91906112f8565b61081c565b005b606060038054610355906113b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610381906113b6565b80156103cc5780601f106103a3576101008083540402835291602001916103cc565b820191905f5260205f20905b8154815290600101906020018083116103af57829003601f168201915b5050505050905090565b5f806103e0610912565b90506103ed818585610919565b600191505092915050565b5f600254905090565b5f8061040b610912565b9050610418858285610adc565b610423858585610b67565b60019150509392505050565b5f6012905090565b5f80610441610912565b90506104d181858560015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546104cc9190611413565b610919565b600191505092915050565b6104ed6104e7610912565b82610ddc565b50565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b61053d610912565b73ffffffffffffffffffffffffffffffffffffffff1661055b6105dc565b73ffffffffffffffffffffffffffffffffffffffff16146105b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a890611490565b60405180910390fd5b6105ba5f610fa8565b565b6105ce826105c8610912565b83610adc565b6105d88282610ddc565b5050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610613906113b6565b80601f016020809104026020016040519081016040528092919081815260200182805461063f906113b6565b801561068a5780601f106106615761010080835404028352916020019161068a565b820191905f5260205f20905b81548152906001019060200180831161066d57829003601f168201915b5050505050905090565b5f8061069e610912565b90505f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490508381101561075f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107569061151e565b60405180910390fd5b61076c8286868403610919565b60019250505092915050565b5f80610782610912565b905061078f818585610b67565b600191505092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b610824610912565b73ffffffffffffffffffffffffffffffffffffffff166108426105dc565b73ffffffffffffffffffffffffffffffffffffffff1614610898576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088f90611490565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fd906115ac565b60405180910390fd5b61090f81610fa8565b50565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097e9061163a565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ec906116c8565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610acf9190611230565b60405180910390a3505050565b5f610ae7848461079a565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610b615781811015610b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4a90611730565b60405180910390fd5b610b608484848403610919565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610bd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcc906117be565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3a9061184c565b60405180910390fd5b610c4e83838361106b565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610cd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc8906118da565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610d5f9190611413565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610dc39190611230565b60405180910390a3610dd6848484611070565b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4190611968565b60405180910390fd5b610e55825f8361106b565b5f805f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610ed8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecf906119f6565b60405180910390fd5b8181035f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508160025f828254610f2c9190611a14565b925050819055505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f909190611230565b60405180910390a3610fa3835f84611070565b505050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156110ac578082015181840152602081019050611091565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6110d182611075565b6110db818561107f565b93506110eb81856020860161108f565b6110f4816110b7565b840191505092915050565b5f6020820190508181035f83015261111781846110c7565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61114c82611123565b9050919050565b61115c81611142565b8114611166575f80fd5b50565b5f8135905061117781611153565b92915050565b5f819050919050565b61118f8161117d565b8114611199575f80fd5b50565b5f813590506111aa81611186565b92915050565b5f80604083850312156111c6576111c561111f565b5b5f6111d385828601611169565b92505060206111e48582860161119c565b9150509250929050565b5f8115159050919050565b611202816111ee565b82525050565b5f60208201905061121b5f8301846111f9565b92915050565b61122a8161117d565b82525050565b5f6020820190506112435f830184611221565b92915050565b5f805f606084860312156112605761125f61111f565b5b5f61126d86828701611169565b935050602061127e86828701611169565b925050604061128f8682870161119c565b9150509250925092565b5f60ff82169050919050565b6112ae81611299565b82525050565b5f6020820190506112c75f8301846112a5565b92915050565b5f602082840312156112e2576112e161111f565b5b5f6112ef8482850161119c565b91505092915050565b5f6020828403121561130d5761130c61111f565b5b5f61131a84828501611169565b91505092915050565b61132c81611142565b82525050565b5f6020820190506113455f830184611323565b92915050565b5f80604083850312156113615761136061111f565b5b5f61136e85828601611169565b925050602061137f85828601611169565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806113cd57607f821691505b6020821081036113e0576113df611389565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61141d8261117d565b91506114288361117d565b92508282019050808211156114405761143f6113e6565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f61147a60208361107f565b915061148582611446565b602082019050919050565b5f6020820190508181035f8301526114a78161146e565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f61150860258361107f565b9150611513826114ae565b604082019050919050565b5f6020820190508181035f830152611535816114fc565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f61159660268361107f565b91506115a18261153c565b604082019050919050565b5f6020820190508181035f8301526115c38161158a565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f61162460248361107f565b915061162f826115ca565b604082019050919050565b5f6020820190508181035f83015261165181611618565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f6116b260228361107f565b91506116bd82611658565b604082019050919050565b5f6020820190508181035f8301526116df816116a6565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000005f82015250565b5f61171a601d8361107f565b9150611725826116e6565b602082019050919050565b5f6020820190508181035f8301526117478161170e565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f6117a860258361107f565b91506117b38261174e565b604082019050919050565b5f6020820190508181035f8301526117d58161179c565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f61183660238361107f565b9150611841826117dc565b604082019050919050565b5f6020820190508181035f8301526118638161182a565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f6118c460268361107f565b91506118cf8261186a565b604082019050919050565b5f6020820190508181035f8301526118f1816118b8565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f206164647265735f8201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b5f61195260218361107f565b915061195d826118f8565b604082019050919050565b5f6020820190508181035f83015261197f81611946565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e5f8201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b5f6119e060228361107f565b91506119eb82611986565b604082019050919050565b5f6020820190508181035f830152611a0d816119d4565b9050919050565b5f611a1e8261117d565b9150611a298361117d565b9250828203905081811115611a4157611a406113e6565b5b9291505056fea2646970667358221220cea691aacd5cd5c60c9895f6393c6beb2e719e8cc7867383d7d345b02087f52d64736f6c63430008150033;
        return MEM[0 len 6781];
    } else {
        MEM[4 + MEM[64] + 0] = 32;
        revert(Error('ERC20: mint to the zero address'));
    }
}

