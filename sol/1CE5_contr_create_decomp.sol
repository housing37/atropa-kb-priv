// Decompiled by library.dedaub.com
// 2023.09.10 17:43 UTC
// Compiled using the solidity compiler version 0.8.21


// Data structures and variables inferred from the use of storage instructions
mapping (uint256 => uint256) owner; // STORAGE[0x0]
uint256 stor_2; // STORAGE[0x2]
uint256[] array_3; // STORAGE[0x3]
uint256[] array_4; // STORAGE[0x4]
uint256 ___function_selector__; // STORAGE[0x5] bytes 0 to 19


// Events
OwnershipTransferred(address, address);
Transfer(address, address, uint256);

function _SafeExp(uint256 varg0, uint256 varg1, uint256 varg2) private {
    if (varg1) {
        if (varg0) {
            if (varg0 == 1) {
                return 1;
            } else if (varg0 == 2) {
                require(varg1 <= uint8.max, Panic(17)); // arithmetic overflow or underflow
                require(2 ** varg1 <= varg2, Panic(17)); // arithmetic overflow or underflow
                return 2 ** varg1;
            } else if (!((varg0 < 11) & (varg1 < 78) | (varg0 < 307) & (varg1 < 32))) {
                v0 = v1 = 1;
                while (varg1 > 1) {
                    require(varg0 <= varg2 / varg0, Panic(17)); // arithmetic overflow or underflow
                    if (varg1 & 0x1) {
                        v0 = v0 * varg0;
                    }
                    varg0 *= varg0;
                    varg1 = varg1 >> 1;
                }
                require(v0 <= varg2 / varg0, Panic(17)); // arithmetic overflow or underflow
                return v0 * varg0;
            } else {
                require(varg0 ** varg1 <= varg2, Panic(17)); // arithmetic overflow or underflow
                return varg0 ** varg1;
            }
        } else {
            return 0;
        }
    } else {
        return 1;
    }
}

function _SafeAdd(uint256 varg0, uint256 varg1) private {
    require(varg0 <= varg0 + varg1, Panic(17)); // arithmetic overflow or underflow
    return varg0 + varg1;
}

// Note: The function selector is not present in the original solidity code.
// However, we display it for the sake of completeness.

function __function_selector__() public nonPayable {
    require(v0.length <= uint64.max, Panic(65)); // failed memory allocation (too much memory)
    v1 = array_3.length >> 1;
    if (!(array_3.length & 0x1)) {
        v1 = v2 = v1 & 0x7f;
    }
    require((array_3.length & 0x1) - (v1 < 32), Panic(34)); // access to incorrectly encoded storage byte array
    if (v1 > 31) {
        v3 = v4 = array_3.data;
        v3 = v5 = v4 + (v0.length + 31 >> 5);
        while (v3 < v4 + (v1 + 31 >> 5)) {
            STORAGE[v3] = STORAGE[v3] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff | uint256(0);
            v3 = v3 + 1;
        }
    }
    v6 = v7 = 32;
    if (v0.length > 31 == 1) {
        v8 = array_3.data;
        v9 = v10 = 0;
        while (v9 < v0.length & ~0x1f) {
            STORAGE[v8] = MEM[0xd8a7d984d984d8a700000000000000000000000000000000000000000000000010d8a7d984d8a7d985d8a7d8b1d8a7d8aa00000000000000000000000000000000 + v6];
            v8 = v8 + 1;
            v6 = v6 + 32;
            v9 = v9 + 32;
        }
        if (v0.length & ~0x1f < v0.length) {
            STORAGE[v8] = MEM[0xd8a7d984d984d8a700000000000000000000000000000000000000000000000010d8a7d984d8a7d985d8a7d8b1d8a7d8aa00000000000000000000000000000000 + v6] & ~(~0 >> ((v0.length & 0x1f) << 3));
        }
        array_3 = (v0.length << 1) + 1;
    } else {
        v11 = v12 = 0;
        if (v0.length) {
            v13 = v0.data;
        }
        array_3 = v11 & ~(~0 >> (v0.length << 3)) | v0.length << 1;
        // Unknown jump to Block 0x691B0x10. Refer to 3-address code (TAC);
    }
    require(v14.length <= uint64.max, Panic(65)); // failed memory allocation (too much memory)
    v15 = array_4.length >> 1;
    if (!(array_4.length & 0x1)) {
        v15 = v16 = v15 & 0x7f;
    }
    require((array_4.length & 0x1) - (v15 < 32), Panic(34)); // access to incorrectly encoded storage byte array
    if (v15 > 31) {
        v17 = v18 = array_4.data;
        v17 = v19 = v18 + (v14.length + 31 >> 5);
        while (v17 < v18 + (v15 + 31 >> 5)) {
            STORAGE[v17] = STORAGE[v17] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff | uint256(0);
            v17 = v17 + 1;
        }
    }
    v20 = v21 = 32;
    if (v14.length > 31 == 1) {
        v22 = array_4.data;
        v23 = v24 = 0;
        while (v23 < v14.length & ~0x1f) {
            STORAGE[v22] = MEM[0xd8a7d984d8a7d985d8a7d8b1d8a7d8aa000000000000000000000000000000008c379a000000000000000000000000000000000000000000000000000000000 + v20];
            v22 = v22 + 1;
            v20 = v20 + 32;
            v23 = v23 + 32;
        }
        if (v14.length & ~0x1f < v14.length) {
            STORAGE[v22] = MEM[0xd8a7d984d8a7d985d8a7d8b1d8a7d8aa000000000000000000000000000000008c379a000000000000000000000000000000000000000000000000000000000 + v20] & ~(~0 >> ((v14.length & 0x1f) << 3));
        }
        array_4 = (v14.length << 1) + 1;
    } else {
        v25 = v26 = 0;
        if (v14.length) {
            v27 = v14.data;
        }
        array_4 = v25 & ~(~0 >> (v14.length << 3)) | v14.length << 1;
        // Unknown jump to Block 0x691B0x8e. Refer to 3-address code (TAC);
    }
    ___function_selector__ = msg.sender;
    emit OwnershipTransferred(___function_selector__, msg.sender);
    v28 = _SafeExp(10, uint8(18), uint256.max);
    require(!0x0 | (v28 == 0 * v28 / 0), Panic(17)); // arithmetic overflow or underflow
    if (msg.sender - address(0x0)) {
        v29 = _SafeAdd(stor_2, 0 * v28);
        stor_2 = v29;
        v30 = _SafeAdd(owner[msg.sender], 0 * v28);
        owner[msg.sender] = v30;
        MEM[MEM[64] + 0] = 0 * v28;
        emit Transfer(address(0x0), msg.sender, 0 * v28);
        MEM[0 len 7757] = 0x608060405234801561000f575f80fd5b5060043610610109575f3560e01c806370a08231116100a057806395d89b411161006f57806395d89b4114610291578063a457c2d7146102af578063a9059cbb146102df578063dd62ed3e1461030f578063f2fde38b1461033f57610109565b806370a082311461021d578063715018a61461024d57806379cc6790146102575780638da5cb5b1461027357610109565b8063313ce567116100dc578063313ce567146101a957806339509351146101c757806342966c68146101f75780635b19ec681461021357610109565b806306fdde031461010d578063095ea7b31461012b57806318160ddd1461015b57806323b872dd14610179575b5f80fd5b61011561035b565b60405161012291906112ad565b60405180910390f35b6101456004803603810190610140919061135e565b6103eb565b60405161015291906113b6565b60405180910390f35b61016361040d565b60405161017091906113de565b60405180910390f35b610193600480360381019061018e91906113f7565b610416565b6040516101a091906113b6565b60405180910390f35b6101b1610444565b6040516101be9190611462565b60405180910390f35b6101e160048036038101906101dc919061135e565b61044c565b6040516101ee91906113b6565b60405180910390f35b610211600480360381019061020c919061147b565b6104f1565b005b61021b610505565b005b610237600480360381019061023291906114a6565b610547565b60405161024491906113de565b60405180910390f35b61025561058c565b005b610271600480360381019061026c919061135e565b610613565b005b61027b610633565b60405161028891906114e0565b60405180910390f35b61029961065b565b6040516102a691906112ad565b60405180910390f35b6102c960048036038101906102c4919061135e565b6106eb565b6040516102d691906113b6565b60405180910390f35b6102f960048036038101906102f4919061135e565b6107cf565b60405161030691906113b6565b60405180910390f35b610329600480360381019061032491906114f9565b6107f1565b60405161033691906113de565b60405180910390f35b610359600480360381019061035491906114a6565b610873565b005b60606003805461036a90611564565b80601f016020809104026020016040519081016040528092919081815260200182805461039690611564565b80156103e15780601f106103b8576101008083540402835291602001916103e1565b820191905f5260205f20905b8154815290600101906020018083116103c457829003601f168201915b5050505050905090565b5f806103f5610969565b9050610402818585610970565b600191505092915050565b5f600254905090565b5f80610420610969565b905061042d858285610b33565b610438858585610bbe565b60019150509392505050565b5f6012905090565b5f80610456610969565b90506104e681858560015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546104e191906115c1565b610970565b600191505092915050565b6105026104fc610969565b82610e33565b50565b610545737a20189b297343cf26d8548764b04891f37f3414610525610444565b600a6105319190611723565b63423a35c7610540919061176d565b610fff565b565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610594610969565b73ffffffffffffffffffffffffffffffffffffffff166105b2610633565b73ffffffffffffffffffffffffffffffffffffffff1614610608576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ff906117f8565b60405180910390fd5b6106115f611156565b565b6106258261061f610969565b83610b33565b61062f8282610e33565b5050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461066a90611564565b80601f016020809104026020016040519081016040528092919081815260200182805461069690611564565b80156106e15780601f106106b8576101008083540402835291602001916106e1565b820191905f5260205f20905b8154815290600101906020018083116106c457829003601f168201915b5050505050905090565b5f806106f5610969565b90505f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050838110156107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ad90611886565b60405180910390fd5b6107c38286868403610970565b60019250505092915050565b5f806107d9610969565b90506107e6818585610bbe565b600191505092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b61087b610969565b73ffffffffffffffffffffffffffffffffffffffff16610899610633565b73ffffffffffffffffffffffffffffffffffffffff16146108ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e6906117f8565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361095d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095490611914565b60405180910390fd5b61096681611156565b50565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d5906119a2565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4390611a30565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610b2691906113de565b60405180910390a3505050565b5f610b3e84846107f1565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610bb85781811015610baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba190611a98565b60405180910390fd5b610bb78484848403610970565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2390611b26565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9190611bb4565b60405180910390fd5b610ca5838383611219565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1f90611c42565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610db691906115c1565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e1a91906113de565b60405180910390a3610e2d84848461121e565b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ea1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9890611cd0565b60405180910390fd5b610eac825f83611219565b5f805f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610f2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2690611d5e565b60405180910390fd5b8181035f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508160025f828254610f839190611d7c565b925050819055505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610fe791906113de565b60405180910390a3610ffa835f8461121e565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361106d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106490611df9565b60405180910390fd5b6110785f8383611219565b8060025f82825461108991906115c1565b92505081905550805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546110db91906115c1565b925050819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161113f91906113de565b60405180910390a36111525f838361121e565b5050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561125a57808201518184015260208101905061123f565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61127f82611223565b611289818561122d565b935061129981856020860161123d565b6112a281611265565b840191505092915050565b5f6020820190508181035f8301526112c58184611275565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6112fa826112d1565b9050919050565b61130a816112f0565b8114611314575f80fd5b50565b5f8135905061132581611301565b92915050565b5f819050919050565b61133d8161132b565b8114611347575f80fd5b50565b5f8135905061135881611334565b92915050565b5f8060408385031215611374576113736112cd565b5b5f61138185828601611317565b92505060206113928582860161134a565b9150509250929050565b5f8115159050919050565b6113b08161139c565b82525050565b5f6020820190506113c95f8301846113a7565b92915050565b6113d88161132b565b82525050565b5f6020820190506113f15f8301846113cf565b92915050565b5f805f6060848603121561140e5761140d6112cd565b5b5f61141b86828701611317565b935050602061142c86828701611317565b925050604061143d8682870161134a565b9150509250925092565b5f60ff82169050919050565b61145c81611447565b82525050565b5f6020820190506114755f830184611453565b92915050565b5f602082840312156114905761148f6112cd565b5b5f61149d8482850161134a565b91505092915050565b5f602082840312156114bb576114ba6112cd565b5b5f6114c884828501611317565b91505092915050565b6114da816112f0565b82525050565b5f6020820190506114f35f8301846114d1565b92915050565b5f806040838503121561150f5761150e6112cd565b5b5f61151c85828601611317565b925050602061152d85828601611317565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061157b57607f821691505b60208210810361158e5761158d611537565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6115cb8261132b565b91506115d68361132b565b92508282019050808211156115ee576115ed611594565b5b92915050565b5f8160011c9050919050565b5f808291508390505b60018511156116495780860481111561162557611624611594565b5b60018516156116345780820291505b8081029050611642856115f4565b9450611609565b94509492505050565b5f82611661576001905061171c565b8161166e575f905061171c565b8160018114611684576002811461168e576116bd565b600191505061171c565b60ff8411156116a05761169f611594565b5b8360020a9150848211156116b7576116b6611594565b5b5061171c565b5060208310610133831016604e8410600b84101617156116f25782820a9050838111156116ed576116ec611594565b5b61171c565b6116ff8484846001611600565b9250905081840481111561171657611715611594565b5b81810290505b9392505050565b5f61172d8261132b565b915061173883611447565b92506117657fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611652565b905092915050565b5f6117778261132b565b91506117828361132b565b92508282026117908161132b565b915082820484148315176117a7576117a6611594565b5b5092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f6117e260208361122d565b91506117ed826117ae565b602082019050919050565b5f6020820190508181035f83015261180f816117d6565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f61187060258361122d565b915061187b82611816565b604082019050919050565b5f6020820190508181035f83015261189d81611864565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f6118fe60268361122d565b9150611909826118a4565b604082019050919050565b5f6020820190508181035f83015261192b816118f2565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f61198c60248361122d565b915061199782611932565b604082019050919050565b5f6020820190508181035f8301526119b981611980565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f611a1a60228361122d565b9150611a25826119c0565b604082019050919050565b5f6020820190508181035f830152611a4781611a0e565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000005f82015250565b5f611a82601d8361122d565b9150611a8d82611a4e565b602082019050919050565b5f6020820190508181035f830152611aaf81611a76565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f611b1060258361122d565b9150611b1b82611ab6565b604082019050919050565b5f6020820190508181035f830152611b3d81611b04565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f611b9e60238361122d565b9150611ba982611b44565b604082019050919050565b5f6020820190508181035f830152611bcb81611b92565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f611c2c60268361122d565b9150611c3782611bd2565b604082019050919050565b5f6020820190508181035f830152611c5981611c20565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f206164647265735f8201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b5f611cba60218361122d565b9150611cc582611c60565b604082019050919050565b5f6020820190508181035f830152611ce781611cae565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e5f8201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b5f611d4860228361122d565b9150611d5382611cee565b604082019050919050565b5f6020820190508181035f830152611d7581611d3c565b9050919050565b5f611d868261132b565b9150611d918361132b565b9250828203905081811115611da957611da8611594565b5b92915050565b7f45524332303a206d696e7420746f20746865207a65726f2061646472657373005f82015250565b5f611de3601f8361122d565b9150611dee82611daf565b602082019050919050565b5f6020820190508181035f830152611e1081611dd7565b905091905056fea2646970667358221220a6e3ecc7e645a8ffd41156fdbb239ae9810912e3b0a9b09ed6b49f9a0df1cb3764736f6c63430008150033;
        return MEM[0 len 7757];
    } else {
        MEM[4 + MEM[64] + 0] = 32;
        revert(Error('ERC20: mint to the zero address'));
    }
}

